package docker

import (
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/joho/godotenv"
)

func ConfigureDocker() {
	conf := `

# DO NOT EDIT THIS FILE
services:
   postgres:
      image: postgres:16
      container_name: postgres_container
      environment:
      POSTGRES_USER: ${POST_USER}
      POSTGRES_PASSWORD: ${POST_PASSWORD}
      POSTGRES_DB: ${DBNAME}
   ports:
      - "${PG_PORT}:5432"
   expose:
      - "5432"
   restart: always
   networks:
      custom_network:
      ipv4_address: ${DOCKER_IP}
      volumes:
         - postgres_data:/var/lib/postgresql/data
         - ./certs:/var/lib/postgresql/certs
         - ./docker/compose/mounts:/var/lib/postgresql/custom
      command:
      - "postgres"
      - "-c"
      - "config_file=/var/lib/postgresql/data/postgresql.conf"
      - "-c"
      - "hba_file=/var/lib/postgresql/custom/pg_hba.conf"
networks:
   custom_network:
   driver: bridge
   ipam:
      config:
         - subnet: ${SUBNET}

   volumes:
      postgres_data:
`

	// Create the directory if it doesn't exist
	cnf, err := os.Open(".docker/compose/docker-compose.yml")
	if err != nil {
		fmt.Println("Error creating docker-compose.yml file:", err)
		return
	}
	defer cnf.Close()

	_, err = cnf.Write([]byte(conf))
	if err != nil {
		fmt.Println("Error writing to docker-compose.yml file:", err)
		return
	}

	fmt.Println("Docker configuration file created successfully.")
}

func CreateHBAFile() {

	// Find the IP for active network interface
	cmd := exec.Command("ip", "-o", "-4", "addr", "show", "scope", "global", "|", "awk", "{print $4}", "|", "head", "-n", "1")
	output, err := cmd.Output()
	if err != nil {
		fmt.Println("Error getting network interfaces:", err)
		return
	}
	// Trim the cidr from the output
	cidr := strings.TrimSpace(string(output))
	// Split the IP address and CIDR
	ipParts := strings.Split(cidr, "/")
	if len(ipParts) != 2 {
		fmt.Println("Error parsing IP address:", cidr)
		return
	}

	ip := ipParts[0]

	conf := fmt.Sprintf(`
	# TYPE  DATABASE        USER            ADDRESS                 METHOD
	# "local" is for Unix domain socket connections only
	local   all             all                                     deny
	# IPv4 local connections:
	host    all             all           %s/32            md5
	# IPv6 local connections:
	host    all             all                     deny
	# Allow replication connections from localhost, by a user with the
	# replication privilege.
	#local   replication     all                                     peer
	#host    replication     all	
	`, ip)

	// Open the pg_hba.conf file
	cnf, err := os.Open(".docker/compose/mounts/pg_hba.conf")
	if err != nil {
		fmt.Println("Error creating pg_hba.conf file:", err)
		return
	}
	defer cnf.Close()
	// Write the configuration to the file
	_, err = cnf.Write([]byte(conf))
	if err != nil {
		fmt.Println("Error writing to pg_hba.conf file:", err)
		return
	}
	defer cnf.Close()
	fmt.Println("pg_hba.conf file created successfully.")
}

func ConfigureDockerEnv() {

	CreateHBAFile()

	godotenv.Load(".env")
	user := os.Getenv("POST_USER")
	password := os.Getenv("POST_PASSWORD")
	dbname := os.Getenv("DBNAME")
	dockerip := os.Getenv("DOCKER_IP")
	dbport := os.Getenv("PG_PORT")
	subnet := os.Getenv("SUBNET")
	conf := fmt.Sprintf("POST_USER=%s\nPOST_PASSWORD=%s\nDBNAME=%s\nPG_PORT=%s\nDOCKER_IP=%s\nSUBNET=%s\n", user, password, dbname, dbport, dockerip, subnet)

	cnf, err := os.Open(".docker/compose/.env")
	if err != nil {
		return
	}
	defer cnf.Close()
	_, err = cnf.Write([]byte(conf))
	if err != nil {
		fmt.Println("Error writing to .env file:", err)
		return

	}

	fmt.Println("docker env set successfully.")

}

func StartDocker() {

	fmt.Println("Starting Docker...")

	// Enable and start Docker service
	// This command may require sudo privileges
	cmd := "sudo systemctl enable docker && sudo systemctl restart docker"
	err := exec.Command("bash", "-c", cmd).Run()
	if err != nil {
		fmt.Println("Docker is not running. Please start Docker and try again.")
		return
	}

	// Check if Docker is running
	cmd = "docker info"
	err = exec.Command("bash", "-c", cmd).Run()
	if err != nil {
		fmt.Println("Docker is not running. Please start Docker and try again.")
		return
	}
	fmt.Println("Docker installed successfully.")
}

func StartDB() {
	fmt.Println("Starting Postgres container...")

	// Start the Docker container using docker-compose
	cmd := "sudo docker-compose -f .docker/compose/docker-compose.yml up -d"
	err := exec.Command("bash", "-c", cmd).Run()
	if err != nil {
		fmt.Println("Error starting Docker container:", err)
		return
	}
	// Check if the container is running
	cmd = "sudo docker ps"
	err = exec.Command("bash", "-c", cmd).Run()
	if err != nil {
		fmt.Println("Error checking Docker container status:", err)
		return
	}

	fmt.Println("Database container started successfully.")
}
